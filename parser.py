from xml.dom.minidom import parse
import string
import operator
from string import maketrans
import glob, os
import cPickle as pickle

def createDict(vList):

    vDict={}
    stopWords = ['on', 'and', 'with' 'a', 'any', 'a', 'through', 'the', 'in', 'to', 'a', '.', 'to', 'of', 'which',
                 'results', 'an', 'releases', 'are', ';', ',', 'other', 'by', 'this', 'will', 'subsequently', 'if',
                 'is', 'may', 'versions', 'affected', 'prior', 'Juniper', 'Networks', 'issue', 'different', 'can',
                 'issued', 'device', 'until', 'then']

    for v in vList:
        for word in v.strip().split(' '):
            word = word.lower()
            if word not in stopWords:
                words = word.split('\n')
                for w in words:
                    if w not in stopWords:
                        #w = word.translate(string.punctuation)
                        if vDict.get(w,None) == None:
                            vDict[w] = 1
                        else:
                            vDict[w]+= 1
    #print the dictionary
    sortedDict = sorted(vDict.items(), key = operator.itemgetter(1), reverse= True)
    print sortedDict

def processCVE(fileName):
    dom = parse(fileName)
    names = dom.getElementsByTagName('Notes')
    vulnerability_list = []
    stopwords = ['on','and', 'with' 'a', 'any', 'a', 'through', 'the', 'in', 'to', 'a', '.', 'to', 'of', 'which', 'results', 'an', 'releases', 'are',';', ',','other','by', 'this', 'will', 'subsequently', 'if', 'is', 'may', 'versions', 'affected', 'prior', 'Juniper', 'Networks', 'issue', 'different', 'can', 'issued', 'device', 'until', 'then']
    for name in names:
        note = name.getElementsByTagName('Note')[0]
        description = note.firstChild.data
        if(description.find('** RESERVED **')) == -1:
            description.replace('\n',' ')
            description = description.encode('ascii')
            vulnerability_list.append(description)
    #print vulnerability_list
    createDict(vulnerability_list)
    print("-----------------------------------")

def start():
    #TODO: loop over the repository containing the CVEs
    #TODO: call this method for all CVEs
    os.chdir("CVE")
    for file in glob.glob("*.xml"):
        print(file)
        processCVE(file)

if __name__ == "__main__":
    start()
